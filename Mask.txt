#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <Servo.h>

//Conexao
const char* ssid = "guest";
const char* password = "123456789";



//Pinagem
int PinA0 = A0;
Servo servo;

//Conexao MQTT
const char* mqttServer = "postman.cloudmqtt.com";   //server
const char* mqttUser = "aeleozfk";              //user
const char* mqttPassword = "J0MSDy4RiaK8";      //password
const int mqttPort = 16157;                     //port
const char* mqttTopicSub = "mask/mask";      //tópico que sera assinado
String strMSG = "0";
char mensagem[30];

WiFiClient espClient;
PubSubClient client(espClient);


void setup() {

  Serial.begin(9600);

  servo.attach(15);
  servo.write(0);

  //Conexao WIfi
  Serial.println();
  Serial.print("Wifi connecting to ");
  Serial.println( ssid );
  WiFi.begin(ssid, password);
  Serial.println();
  Serial.print("Connecting");
  while ( WiFi.status() != WL_CONNECTED ) {
    delay(500);
    Serial.print(".");
  }
  Serial.println();
  Serial.println("Wifi Connected Success!");
  Serial.print("NodeMCU IP Address : ");
  Serial.println(WiFi.localIP() );
  Serial.println("Conectado na rede WiFi com sucesso!");

  //Conexao MQTT
  client.setServer(mqttServer, mqttPort);
  client.setCallback(callback);

  while (!client.connected()) {
    Serial.println("Conectando ao Broker MQTT...");
    if (client.connect("ESP8266Client", mqttUser, mqttPassword )) {
      Serial.println("Conectado");
    } else {
      Serial.print("falha estado  ");
      Serial.print(client.state());
      delay(2000);

    }
  }

  //subscreve no tópico
  client.subscribe(mqttTopicSub);


}

void loop() {


  int SensorValue1 = analogRead(PinA0);

  Serial.print(SensorValue1); Serial.print(" - ");
  Serial.print(strMSG); Serial.print(" - ");




  if (SensorValue1 > 950) {

    servo.write(90);

    //Enviando Msg Broker
    sprintf(mensagem, "0");
    Serial.print("Mensagem enviada: ");
    Serial.println(mensagem);  //Envia a mensagem ao broker
    client.publish("mask/mask", mensagem);
    Serial.println("Mensagem enviada com sucesso...");

  } else {

    servo.write(0);

  }



  delay(1000);

}


//Funcoes

void callback(char* topic, byte* payload, unsigned int length) {

  //armazena msg recebida em uma sring
  payload[length] = '\0';
  String strMSG = String((char*)payload);

#ifdef DEBUG
  Serial.print("Mensagem chegou do tópico: ");
  Serial.println(topic);
  Serial.print("Mensagem:");
  Serial.print(strMSG);
  Serial.println();
  Serial.println("-----------------------");
#endif

  //aciona saída conforme msg recebida
  if (strMSG == "1") {        //se msg "1"
    Serial.print("1");
  } else if (strMSG == "0") {  //se msg "0"
    Serial.print("0");
  }

}



//função pra reconectar ao servido MQTT
void reconect() {
  //Enquanto estiver desconectado
  while (!client.connected()) {
#ifdef DEBUG
    Serial.print("Tentando conectar ao servidor MQTT");
#endif

    bool conectado = strlen(mqttUser) > 0 ?
                     client.connect("ESP8266Client", mqttUser, mqttPassword) :
                     client.connect("ESP8266Client");

    if (conectado) {
#ifdef DEBUG
      Serial.println("Conectado!");
#endif
      //subscreve no tópico
      client.subscribe(mqttTopicSub, 1); //nivel de qualidade: QoS 1
    } else {
#ifdef DEBUG
      Serial.println("Falha durante a conexão.Code: ");
      Serial.println( String(client.state()).c_str());
      Serial.println("Tentando novamente em 10 s");
#endif
      //Aguarda 10 segundos
      delay(5000);
    }
  }
}